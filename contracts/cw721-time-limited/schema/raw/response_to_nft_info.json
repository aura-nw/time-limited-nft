{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "NftInfoResponse_for_Cw2981QueryMsg",
  "type": "object",
  "required": [
    "extension"
  ],
  "properties": {
    "extension": {
      "description": "You can add any custom metadata here when you extend cw721-base",
      "allOf": [
        {
          "$ref": "#/definitions/Cw2981QueryMsg"
        }
      ]
    },
    "token_uri": {
      "description": "Universal resource identifier for this NFT Should point to a JSON file that conforms to the ERC721 Metadata JSON Schema",
      "type": [
        "string",
        "null"
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Cw2981QueryMsg": {
      "oneOf": [
        {
          "description": "Should be called on sale to see if royalties are owed by the marketplace selling the NFT, if CheckRoyalties returns true See https://eips.ethereum.org/EIPS/eip-2981",
          "type": "object",
          "required": [
            "royalty_info"
          ],
          "properties": {
            "royalty_info": {
              "type": "object",
              "required": [
                "sale_price",
                "token_id"
              ],
              "properties": {
                "sale_price": {
                  "$ref": "#/definitions/Uint128"
                },
                "token_id": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Called against contract to determine if this NFT implements royalties. Should return a boolean as part of CheckRoyaltiesResponse - default can simply be true if royalties are implemented at token level (i.e. always check on sale)",
          "type": "object",
          "required": [
            "check_royalties"
          ],
          "properties": {
            "check_royalties": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
